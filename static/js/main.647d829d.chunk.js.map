{"version":3,"sources":["TodoStore.ts","Modules.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["rootStore","todoStore","makeObservable","this","makePersistable","name","properties","storage","localStorage","todoContent","itemToEdit","content","undefined","todoItems","push","id","Date","now","done","item","indexToRemove","findIndex","todo","splice","slice","sort","a","b","observable","action","v","computed","TodoStoreContext","React","createContext","useStores","useContext","TodoItem","observer","className","onClick","setEditItem","disabled","size","color","toggleState","removeItem","TodoItemList","length","sortedTodoItems","map","key","TodoForm","input","useRef","useEffect","reaction","current","value","onSubmit","event","preventDefault","addItem","ref","type","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.647d829d.chunk.js","sourcesContent":["import { action, computed, observable, makeObservable } from \"mobx\";\nimport { makePersistable } from \"mobx-persist-store\";\nimport { ITodoItem } from \"./types\";\nimport React from \"react\";\n\nexport class TodoStore {\n  constructor() {\n    makeObservable(this);\n\n    makePersistable(this, {\n      name: \"TodoStore\",\n      properties: [\"todoItems\"],\n      storage: localStorage\n    });\n  }\n\n  @observable public todoItems: ITodoItem[] = [\n    {\n      id: 1,\n      content: \"Ditch redux\",\n      done: true,\n    },\n    {\n      id: 2,\n      content: \"Learn MobX\",\n      done: false,\n    },\n  ];\n\n  @action public  setTodoItems = (v: ITodoItem[]) => {\n    this.todoItems = v;\n  }\n\n  @computed public get sortedTodoItems(): ITodoItem[] {\n    return this.todoItems.slice().sort((a, b) => a.id - b.id);\n  }\n\n  @observable public itemToEdit?: ITodoItem;\n\n  @action public setItemToEdit = (v: ITodoItem | undefined)  => {\n    this.itemToEdit = v;\n  }\n\n  @action addItem(todoContent: string) {\n    if (this.itemToEdit) {\n      this.itemToEdit.content = todoContent;\n      this.itemToEdit = undefined;\n      return;\n    }\n\n    this.todoItems.push({\n      id: Date.now(),\n      content: todoContent,\n      done: false,\n    });\n  }\n\n  @action toggleState = (item: ITodoItem) => {\n    item.done = !item.done;\n  };\n\n  @action public removeItem(item: ITodoItem) {\n    const indexToRemove = this.todoItems.findIndex(\n      (todo) => todo.id === item.id\n    );\n\n    this.todoItems.splice(indexToRemove, 1);\n  }\n\n  @action public setEditItem(item: ITodoItem) {\n    this.itemToEdit = item;\n  }\n}\n\nconst rootStore = { todoStore: new TodoStore() };\n\nconst TodoStoreContext = React.createContext(rootStore);\nexport const useStores = () => React.useContext(TodoStoreContext);\n","import React from \"react\";\n\nimport { Trash, Check, Edit2, Plus, SkipBack } from \"react-feather\";\nimport { observer } from \"mobx-react\";\nimport { reaction } from \"mobx\";\n\nimport { useStores } from \"./TodoStore\";\nimport { ITodoItem } from \"./types\";\n\ninterface TodoItemProps {\n  item: ITodoItem;\n}\n\nexport const TodoItem: React.FC<TodoItemProps> = observer(({ item }) => {\n  const { todoStore } = useStores();\n\n  const onCheckClick = () => {\n    todoStore.toggleState(item);\n  };\n\n  const onTrashClick = () => {\n    todoStore.removeItem(item);\n  };\n\n  const onEditClick = () => {\n    todoStore.setEditItem(item);\n  };\n\n  const className = \"todo-list-item\" + (item.done ? \" done\" : \"\");\n\n  return (\n    <li className={className}>\n      <span>{item.content}</span>\n      <button onClick={onEditClick} disabled={item.done}>\n        <Edit2 size=\"20\" color=\"#fff\" />\n      </button>\n      <button className=\"green\" onClick={onCheckClick}>\n        {item.done ? (\n          <SkipBack size=\"20\" color=\"#fff\" />\n        ) : (\n          <Check size=\"20\" color=\"#fff\" />\n        )}\n      </button>\n      <button className=\"red\" onClick={onTrashClick}>\n        <Trash size=\"20\" color=\"#fff\" />\n      </button>\n    </li>\n  );\n});\n\nexport const TodoItemList: React.FC = observer(() => {\n  const { todoStore } = useStores();\n\n  if (!todoStore.todoItems.length) {\n    return <span>Please add some todos</span>;\n  }\n\n  return (\n    <ul className=\"todo-list\">\n      {todoStore.sortedTodoItems.map((item) => (\n        <TodoItem key={item.id} item={item} />\n      ))}\n    </ul>\n  );\n});\n\nexport const TodoForm = () => {\n  const { todoStore } = useStores();\n\n  const input = React.useRef<HTMLInputElement | null>(null);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (input.current && input.current.value) {\n      todoStore.addItem(input.current.value);\n      input.current.value = \"\";\n    }\n  };\n\n\n  React.useEffect(() => {\n    reaction(\n      () => todoStore.itemToEdit,\n      () => {\n        if (input.current && todoStore.itemToEdit) {\n          input.current.value = todoStore.itemToEdit.content;\n        }\n      }\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\n      <input\n        ref={input}\n        type=\"text\"\n        name=\"todo-content\"\n        className=\"todo-form-input\"\n      />\n      <button type=\"submit\">\n        <Plus size=\"20\" color=\"#fff\" />\n      </button>\n    </form>\n  );\n};\n","import React from \"react\";\nimport \"./App.scss\";\nimport { TodoForm, TodoItemList } from \"./Modules\";\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"todo\">\n      <TodoForm />\n      <TodoItemList />\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}